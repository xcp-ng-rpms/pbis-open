From 9cb2fd176486ba499e0025fd34f5a9c6f49fc6fa Mon Sep 17 00:00:00 2001
From: Richard Boulton <rboulton@beyondtrust.com>
Date: Tue, 31 Jan 2017 12:28:10 -0400
Subject: [PATCH] PR 297: TFS84274 - Fix group lookup for PBIS Open

 - Fix issue with null entries in group list #84274
 - Try to clarify the results from AD_FindObjectsBySidList #84274
 - Make AD_FilterNullEntries safe #84274

Related work items: #84274
---
 .../auth-providers/ad-open-provider/adldap.c       | 12 ++++---
 .../auth-providers/ad-open-provider/online.c       | 40 ++++++++++++++++------
 .../auth-providers/ad-open-provider/online.h       | 34 ++++++++++++++++++
 3 files changed, 71 insertions(+), 15 deletions(-)

diff --git a/lsass/server/auth-providers/ad-open-provider/adldap.c b/lsass/server/auth-providers/ad-open-provider/adldap.c
index 5ed0ca7..2a81278 100644
--- a/lsass/server/auth-providers/ad-open-provider/adldap.c
+++ b/lsass/server/auth-providers/ad-open-provider/adldap.c
@@ -1083,9 +1083,12 @@ ADLdap_GetGroupMembers(
                  pContext,
                  dwSidCount,
                  ppszLDAPValues,
-                 &sFoundCount,
+                 NULL,
                  &ppResults);
     BAIL_ON_LSA_ERROR(dwError);
+    
+    sFoundCount = dwSidCount;
+    AD_FilterNullEntries(ppResults, &sFoundCount);
 
     *psCount = sFoundCount;
     *pppResults = ppResults;
@@ -1428,13 +1431,12 @@ ADLdap_GetObjectGroupMembership(
                     pContext,
                     totalSidCount,
                     ppTotalSidList,
-                    &sNumGroupsFound,
+                    NULL,
                     &ppGroupInfoList);
     BAIL_ON_LSA_ERROR(dwError);
 
-    AD_FilterNullEntries(
-            ppGroupInfoList,
-            &sNumGroupsFound);
+    sNumGroupsFound = totalSidCount;
+    AD_FilterNullEntries(ppGroupInfoList, &sNumGroupsFound);
 
     // Determine primary group index
     if (pObject->type == LSA_OBJECT_TYPE_USER &&
diff --git a/lsass/server/auth-providers/ad-open-provider/online.c b/lsass/server/auth-providers/ad-open-provider/online.c
index e3a8ab9..b5d963a 100644
--- a/lsass/server/auth-providers/ad-open-provider/online.c
+++ b/lsass/server/auth-providers/ad-open-provider/online.c
@@ -2349,6 +2349,14 @@ AD_FilterNullEntries(
     size_t sInput = 0;
     size_t sOutput = 0;
 
+    if (psCount == NULL) return;
+
+    if (ppEntries == NULL)
+    {
+        *psCount = 0;
+        return;
+    }
+
     for (; sInput < *psCount; sInput++)
     {
         if (ppEntries[sInput] != NULL)
@@ -4110,11 +4118,9 @@ AD_OnlineFindObjects(
     )
 {
     DWORD dwError = 0;
-    PLSA_SECURITY_OBJECT* ppUnorderedObjects = NULL;
     PLSA_SECURITY_OBJECT* ppObjects = NULL;
     LSA_OBJECT_TYPE type = LSA_OBJECT_TYPE_UNDEFINED;
     DWORD dwIndex = 0;
-    size_t sObjectCount = 0;
 
     switch(QueryType)
     {
@@ -4123,7 +4129,7 @@ AD_OnlineFindObjects(
             pContext,
             dwCount,
             (PSTR*) QueryList.ppszStrings,
-            &sObjectCount,
+            NULL,
             &ppObjects);
         BAIL_ON_LSA_ERROR(dwError);
         break;
@@ -4132,7 +4138,7 @@ AD_OnlineFindObjects(
             pContext,
             dwCount,
             (PSTR*) QueryList.ppszStrings,
-            &sObjectCount,
+            NULL,
             &ppObjects);
          BAIL_ON_LSA_ERROR(dwError);
          break;
@@ -4196,11 +4202,6 @@ AD_OnlineFindObjects(
 
 cleanup:
 
-    if (ppUnorderedObjects)
-    {
-        LsaUtilFreeSecurityObjectList((DWORD) sObjectCount, ppUnorderedObjects);
-    }
-
     return dwError;
 
 error:
@@ -4632,6 +4633,25 @@ error:
     goto cleanup;
 }
 
+static
+BOOLEAN
+AD_ListContainsSid(PSTR* ppszSids, DWORD dwSidCount, PSTR pszSid)
+{
+    DWORD dwIndex;
+    
+    if (ppszSids == NULL || pszSid == NULL) return FALSE;
+    
+    for (dwIndex = 0; dwIndex < dwSidCount; dwIndex++)
+    {
+        if (ppszSids[dwIndex] && strcasecmp(ppszSids[dwIndex], pszSid) ==  0)
+        {
+            return TRUE;
+        }
+    }
+    
+    return FALSE;
+}
+
 DWORD
 AD_OnlineGetGroupMemberSids(
     IN PAD_PROVIDER_CONTEXT pContext,
@@ -4768,7 +4788,7 @@ AD_OnlineGetGroupMemberSids(
     {
         for (dwIndex = 0; dwIndex < sResultsCount; dwIndex++)
         {
-            if (ppResults[dwIndex])
+            if (ppResults[dwIndex] && !AD_ListContainsSid(ppszSids, dwSidCount, ppResults[dwIndex]->pszObjectSid))
             {
                 dwError = LwAllocateString(ppResults[dwIndex]->pszObjectSid, &ppszSids[dwSidCount++]);
                 BAIL_ON_LSA_ERROR(dwError);
diff --git a/lsass/server/auth-providers/ad-open-provider/online.h b/lsass/server/auth-providers/ad-open-provider/online.h
index f293d27..ff41690 100644
--- a/lsass/server/auth-providers/ad-open-provider/online.h
+++ b/lsass/server/auth-providers/ad-open-provider/online.h
@@ -262,6 +262,23 @@ AD_FreeHashObject(
     IN OUT const LW_HASH_ENTRY *pEntry
     );
 
+/**
+ * @brief Perform a lookup for security objects from the given list of DN values
+ * 
+ * Where possible this function will use the local cache to resolve security objects
+ * for the provided DN list. Where items are missing, expired or incomplete in the 
+ * local cache the security object will be queried from AD using LDAP calls.
+ * 
+ * The list of security objects returned in @p pppResults will be a sparse array 
+ * matching the DN values in the @p ppszDNList passed in.
+ * 
+ * @param pContext Handle to the provider context
+ * @param sCount Number of DN values in the @p ppszDNList array
+ * @param ppszDNList Array containing a list of DN values to query
+ * @param psResultsCount The number of security objects set in the sparse @p pppResults array
+ * @param pppResults Sparse array containing a list of security objects matching the @p ppszDNList values
+ * @return PBIS LSA error code
+ */
 DWORD
 AD_FindObjectsByDNList(
     IN PAD_PROVIDER_CONTEXT pContext,
@@ -295,6 +312,23 @@ AD_FindObjectBySid(
     OUT PLSA_SECURITY_OBJECT* ppResult
     );
 
+/**
+ * @brief Perform a lookup for security objects from the given list of SID values
+ * 
+ * Where possible this function will use the local cache to resolve security objects
+ * for the provided SID list. Where items are missing/expired or incomplete in the 
+ * local cache the security object will be queried from AD using LDAP calls.
+ * 
+ * The list of security objects returned in @p pppResults will be a sparse array 
+ * matching the SID values in the @p ppszSidList passed in.
+ * 
+ * @param pContext Handle to the provider context
+ * @param sCount Number of SID values in the @p ppszSidList array
+ * @param ppszSidList Array containing a list of SID values to query
+ * @param psResultsCount The number of security objects set in the sparse @p pppResults array
+ * @param pppResults Sparse array containing a list of security objects matching the @p ppszSidList values
+ * @return PBIS LSA error code
+ */
 DWORD
 AD_FindObjectsBySidList(
     IN PAD_PROVIDER_CONTEXT pContext,
-- 
2.7.4

